http:
  port: 8000

apiEndpoints:
  isolation-api:
    host: '*'
    paths:
      - '/isolation/v1/*'  # Added the missing closing quotation mark
  tenant-api:
    host: '*'
    paths:
      - '/auth/v1/tenant'
      - '/auth/v1/tenant/*'

  company-api:
    host: '*'
    paths:
      - '/auth/v1/company/'

  plan-api:
    host: '*'
    paths:
      - '/auth/v1/plan'
      - '/auth/v1/plan/*'     

  auth-api:
    host: '*'
    paths:
      - '/auth/v1/*'
  
  auth-v1-open-verifyEmail:
    host: '*'
    paths:
      - '/api/v1/verifyEmail'
      - '/api/v1/verifyEmail/*'

  # Replace with your actual microservices    
  sb:
    host: '*'
    paths:
      - '/sb/v1/*'
  ag:
    host: '*'
    paths:
      - '/ag/v1/*'
  tps:
    host: '*'
    paths:
      - '/tps/v1/*'
  quk:
    host: '*'
    paths:
      - '/quk/v1/*' 
  tn:
    host: '*'
    paths:
      - '/tn/v1/*'
      - '/rest/v2/*'
  tq:
    host: '*'
    paths:
      - '/tq/v1/*'

  doc-v1:
    host: '*'
    paths:
      - '/storage/v1/*'

  doc-temp:
    host: '*'
    paths:
      - '/temp/*'

  notification-v1:
    host: '*'
    paths:
      - '/notification/v1/*'      


  ride-v1:
    host: '*'
    paths:
      - '/rest/v1/drivers'
      - '/rest/v1/drivers/*'
      - '/rest/v1/rpc/drivers/*'
      - '/rest/v1/logs/'
      - '/rest/v1/logs/*'
      - '/rest/v1/common/'
      - '/rest/v1/common/*'
      - '/rest/v1/rides/'
      - '/rest/v1/rides/*'
      - '/rest/v1/chart/*'
      - '/rest/v1/fareConfig'
      - '/rest/v1/fareConfig/*'


  origanization-v1:
    host: '*'
    paths:
      - '/rest/v1/passengers'
      - '/rest/v1/passengers/*'
      - '/rest/v1/corporates'
      - '/rest/v1/corporates/*'
      - '/rest/v1/sos'
      - '/rest/v1/sos/*'

  fleet-v1:
    host: '*'
    paths:
      - '/rest/v1/assetmake/'
      - '/rest/v1/assetmodel/'
      - '/rest/v1/assetdevicelogs/'
      - '/rest/v1/assetdriverlogs/'
      - '/rest/v1/assetgroup/'
      - '/rest/v1/asset/'
      - '/rest/v1/asset/*'
      - '/rest/v1/device/'

  go-lang-v1:
    host: '*'
    paths:
      - '/api/v1/*'
      - '/api/v1/updateHistory'
      - '/api/v1/getHistoryData'
      - '/api/v1/getDeviceList'                       

serviceEndpoints:
  isolation-api:
    url: 'http://172.31.30.23:4007/api/v1'
  tenant-api:
    url: 'http://172.31.30.23:4006/api/v1/tenant'
  company-api:
    url: 'http://172.31.30.23:4006/api/v1/company'
  plan-api:
    url: 'http://172.31.30.23:4006/api/v1/plan'    
  auth-api:
    url: 'http://172.31.30.23:4005/api/v1'
  auth-v1-open-verifyEmail:
    url: 'http://172.31.30.23:4005/api/v1/verifyEmail'
  project-setup-api:
    url: 'http://172.31.30.23:4008/api/v1'
  auth-v1-token:
    url: 'http://172.31.30.23:4005/api/v1/token'
  auth-v1-open-resetPassword:
    url: 'http://172.31.30.23:4005/api/v1/resetPassword'

  # Replace with your actual microservices
  sb:
    url: 'http://172.31.30.23:4001/api/v1'
  ag:
    url: 'http://172.31.30.23:4002/api/v1'
  tps:
    url: 'http://172.31.30.23:4008/api/v1'
  quk:
    url: 'http://172.31.30.23:4003/api/v1'
  tn:
    url: 'http://172.31.30.23:4004/api/v1'
  tq:
    url: 'http://172.31.30.23:4009/api/v1' 

  doc-v1:
    url: 'http://172.31.30.23:6011/api/v1'

  doc-temp:
    url: 'http://172.31.30.23:6011/'

  notification-v1:
    url: 'http://172.31.30.23:6012/api/v1'    

  # Rest paths
  ride-v1:
    url: 'http://172.31.30.23:6001'
  origanization-v1:
    url: 'http://172.31.30.23:6002'
  fleet-v1:
    url: 'http://172.31.30.23:6003'

  # Service end point
  go-lang-v1:
    url: 'http://172.31.30.23:8809'                    

policies:
  - cors
  - token-validator
  - proxy

pipelines:
  isolation-apiPipeline:
    apiEndpoints:
      - isolation-api
    policies:
      - token-validator: {}
      - cors: 
            action:
              origin: '*'
              methods: '*'
              allowedHeaders: '*'
      - proxy:
          action:
            serviceEndpoint: isolation-api
            stripPath: true

  tenant-apiPipeline:
    apiEndpoints:
      - tenant-api
    policies:
      - token-validator: {} # (Uncomment if you decide to use this policy)
      - cors: 
            action:
              origin: '*'
              methods: '*'
              allowedHeaders: '*'
      - proxy:
          action:
            serviceEndpoint: tenant-api
            stripPath: true

  company-apiPipeline:
    apiEndpoints:
      - company-api
    policies:
      - token-validator: {} # (Uncomment if you decide to use this policy)
      - cors: 
            action:
              origin: '*'
              methods: '*'
              allowedHeaders: '*'
      - proxy:
          action:
            serviceEndpoint: company-api
            stripPath: true
 
  plan-apiPipeline:
    apiEndpoints:
      - plan-api
    policies:
      - token-validator: {} # (Uncomment if you decide to use this policy)
      - cors: 
            action:
              origin: '*'
              methods: '*'
              allowedHeaders: '*'
      - proxy:
          action:
            serviceEndpoint: plan-api
            stripPath: true                    

  auth-apiPipeline:
    apiEndpoints:
      - auth-api
    policies:
      # - token-validator: {} (Uncomment if you decide to use this policy)
      - cors: 
            action:
              origin: '*'
              methods: '*'
              allowedHeaders: '*'
      - proxy:
          action:
            serviceEndpoint: auth-api
            stripPath: true  # Assuming this is supported by your proxy setup

# Replace with your actual microservices pipeline
  sbPipeline:
    apiEndpoints:
      - sb
    policies:
      - cors: 
            action:
              origin: '*'
              methods: '*'
              allowedHeaders: '*' 
      - proxy:
          - action:
              serviceEndpoint: sb
              stripPath: true
  agPipeline:
    apiEndpoints:
      - ag
    policies:
      - cors: 
            action:
              origin: '*'
              methods: '*'
              allowedHeaders: '*'
      - proxy:
          - action:
              serviceEndpoint: ag       
              stripPath: true
  tpsPipeline:
    apiEndpoints:
      - tps
    policies:
      - cors: 
            action:
              origin: '*'
              methods: '*'
              allowedHeaders: '*'
      - proxy:
          - action:
              serviceEndpoint: tps       
              stripPath: true
  qukPipeline:
    apiEndpoints:
      - quk
    policies:
      - cors: 
            action:
              origin: '*'
              methods: '*'
              allowedHeaders: '*'
      - proxy:
          - action:
              serviceEndpoint: quk       
              stripPath: true
  tnPipeline:
    apiEndpoints:
      - tn
    policies:
      - cors: 
            action:
              origin: '*'
              methods: '*'
              allowedHeaders: '*'
      - proxy:
          - action:
              serviceEndpoint: tn       
              stripPath: true
  tqPipeline:
    apiEndpoints:
      - tq
    policies:
      - cors: 
            action:
              origin: '*'
              methods: '*'
              allowedHeaders: '*'
      - proxy:
          - action:
              serviceEndpoint: tq       
              stripPath: true

  docV1Pipeline:
    apiEndpoints:
      - doc-v1
    policies:
      - token-validator: {}
      - cors: 
            action:
              origin: '*'
              methods: '*'
              allowedHeaders: '*'
      - proxy:
          - action:
              serviceEndpoint: doc-v1       
              stripPath: true

  doctempPipeline:
    apiEndpoints:
      - doc-temp
    policies:
      # - token-validator: {}
      - cors: 
            action:
              origin: '*'
              methods: '*'
              allowedHeaders: '*'
      - proxy:
          - action:
              serviceEndpoint: doc-temp      
              stripPath: false

  notificationV1Pipeline:
    apiEndpoints:
      - notification-v1
    policies:
      - token-validator: {}
      - cors: 
            action:
              origin: '*'
              methods: '*'
              allowedHeaders: '*'
      - proxy:
          - action:
              serviceEndpoint: notification-v1       
              stripPath: true            

  rideV1Pipeline:
    apiEndpoints:
      - ride-v1
    policies:
      - token-validator: {}
      - cors: 
            action:
              origin: '*'
              methods: '*'
              allowedHeaders: '*'
      - proxy:
          - action:
              serviceEndpoint: ride-v1       
              stripPath: false

  origanizationV1Pipeline:
    apiEndpoints:
      - origanization-v1
    policies:
      - token-validator: {}
      - cors: 
            action:
              origin: '*'
              methods: '*'
              allowedHeaders: '*'
      - proxy:
          - action:
              serviceEndpoint: origanization-v1       
              stripPath: false

  fleetV1Pipeline:
    apiEndpoints:
      - fleet-v1
    policies:
      - token-validator: {}
      - cors: 
            action:
              origin: '*'
              methods: '*'
              allowedHeaders: '*'
      - proxy:
          - action:
              serviceEndpoint: fleet-v1       
              stripPath: false

  auth-v1-open-verifyEmail-apiPipeline:
    apiEndpoints:
      - auth-v1-open-verifyEmail
    policies:
      # - token-validator: {} (Uncomment if you decide to use this policy)
      - cors: 
            action:
              origin: '*'
              methods: '*'
              allowedHeaders: '*'
      - proxy:
          action:
            serviceEndpoint: auth-v1-open-verifyEmail
            stripPath: true  # Assuming this is supported by your proxy setup

  go-lang-v1:
    apiEndpoints:
      - go-lang-v1
    policies:
      - token-validator: {}
      - cors:
            action:
              origin: '*'
              methods: '*'
              allowedHeaders: '*'
      - proxy:
          action:
            serviceEndpoint: go-lang-v1
            stripPath: false  # This ensures the full path is sent to the backend                                                                                      
